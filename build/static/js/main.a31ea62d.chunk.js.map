{"version":3,"sources":["ExchangeRateInfo.js","App.js","serviceWorker.js","index.js"],"names":["ExchangeRateInfo","props","toggleRefreshTime","event","setState","refreshTime","target","value","getData","axios","get","then","res","exchangeRatesInfo","data","exchangeRates","intervalID","setTimeout","bind","state","getRowContent","content","i","length","item","push","TableRow","key","TableCell","align","from","to","rate","this","clearTimeout","className","FormControl","variant","InputLabel","htmlFor","Select","native","onChange","label","TableContainer","component","Paper","style","border","Table","minWidth","aria-label","TableHead","backgroundColor","fontWeight","TableBody","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wYAyHeA,E,kDAzGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAjBzB,EAmBnBC,QAAU,WACRC,IACGC,IADH,uDAEGC,MAAK,SAACC,GACL,IAAMC,EAAoBD,EAAIE,KAC9B,EAAKV,SAAS,CAAEW,cAAeF,IAC/B,EAAKG,WAAaC,WAChB,EAAKT,QAAQU,KAAb,gBACA,EAAKC,MAAMd,iBA3BA,EAgCnBe,cAAgB,SAACL,GAEf,IADA,IAAIM,EAAU,GACLC,EAAI,EAAGA,EAAIP,EAAcQ,OAAQD,IAAK,CAC7C,IAAME,EAAOT,EAAcO,GAC3BD,EAAQI,KACN,kBAACC,EAAA,EAAD,CAAUC,IAAKL,GACb,kBAACM,EAAA,EAAD,CAAWC,MAAM,SAASL,EAAKM,MAC/B,kBAACF,EAAA,EAAD,CAAWC,MAAM,SAASL,EAAKO,IAC/B,kBAACH,EAAA,EAAD,CAAWC,MAAM,SAASL,EAAKQ,QAIrC,OAAOX,GA1CP,EAAKF,MAAQ,CACXJ,cAAe,GACfV,YAAa,KAJE,E,gEASjB4B,KAAKzB,Y,6CAIL0B,aAAaD,KAAKjB,c,+BAmClB,OACE,yBAAKmB,UAAU,oBACb,wBAAIA,UAAU,6BAAd,yBACA,yBAAKA,UAAU,gCACb,kBAACC,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,8BAApB,gBAGA,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNlC,MAAO0B,KAAKd,MAAMd,YAClBqC,SAAUT,KAAK/B,kBACfyC,MAAM,gBAEN,4BAAQpC,MAAO,KAAf,aACA,4BAAQA,MAAO,KAAf,cACA,4BAAQA,MAAO,MAAf,iBAKN,kBAACqC,EAAA,EAAD,CACEC,UAAWC,IACXC,MAAO,CAAEC,OAAQ,sBAEjB,kBAACC,EAAA,EAAD,CAAOF,MAAO,CAAEG,SAAU,KAAOC,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CACEC,MAAM,QACNkB,MAAO,CAAEM,gBAAiB,UAAWC,WAAY,SAFnD,QAMA,kBAAC1B,EAAA,EAAD,CACEC,MAAM,QACNkB,MAAO,CAAEM,gBAAiB,UAAWC,WAAY,SAFnD,MAMA,kBAAC1B,EAAA,EAAD,CACEC,MAAM,QACNkB,MAAO,CAAEM,gBAAiB,UAAWC,WAAY,SAFnD,mBAQJ,kBAACC,EAAA,EAAD,KACGtB,KAAKb,cAAca,KAAKd,MAAMJ,uB,GAlGdyC,aCLhBC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCOcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a31ea62d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\n\nclass ExchangeRateInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exchangeRates: [],\n      refreshTime: 5000,\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.intervalID);\n  }\n\n  toggleRefreshTime = (event) => {\n    this.setState({ refreshTime: event.target.value });\n  };\n  getData = () => {\n    axios\n      .get(`https://liquality.io/swap/agent/api/swap/marketinfo`)\n      .then((res) => {\n        const exchangeRatesInfo = res.data;\n        this.setState({ exchangeRates: exchangeRatesInfo });\n        this.intervalID = setTimeout(\n          this.getData.bind(this),\n          this.state.refreshTime\n        );\n      });\n  };\n\n  getRowContent = (exchangeRates) => {\n    let content = [];\n    for (let i = 0; i < exchangeRates.length; i++) {\n      const item = exchangeRates[i];\n      content.push(\n        <TableRow key={i}>\n          <TableCell align=\"right\">{item.from}</TableCell>\n          <TableCell align=\"right\">{item.to}</TableCell>\n          <TableCell align=\"right\">{item.rate}</TableCell>\n        </TableRow>\n      );\n    }\n    return content;\n  };\n\n  render() {\n    return (\n      <div className=\"exchangerateinfo\">\n        <h1 className=\"exchangerateinfo__heading\">Liquality Market Info</h1>\n        <div className=\"exchangerateinfo__actionarea\">\n          <FormControl variant=\"outlined\">\n            <InputLabel htmlFor=\"outlined-age-native-simple\">\n              Refresh Time\n            </InputLabel>\n            <Select\n              native\n              value={this.state.refreshTime}\n              onChange={this.toggleRefreshTime}\n              label=\"Refresh Time\"\n            >\n              <option value={5000}>5 Seconds</option>\n              <option value={10000}>10 Seconds</option>\n              <option value={15000}>15 Seconds</option>\n            </Select>\n          </FormControl>\n        </div>\n\n        <TableContainer\n          component={Paper}\n          style={{ border: \"1px solid #C4C4C4\" }}\n        >\n          <Table style={{ minWidth: 650 }} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell\n                  align=\"right\"\n                  style={{ backgroundColor: \"#F1F4F7\", fontWeight: \"bold\" }}\n                >\n                  From\n                </TableCell>\n                <TableCell\n                  align=\"right\"\n                  style={{ backgroundColor: \"#F1F4F7\", fontWeight: \"bold\" }}\n                >\n                  To\n                </TableCell>\n                <TableCell\n                  align=\"right\"\n                  style={{ backgroundColor: \"#F1F4F7\", fontWeight: \"bold\" }}\n                >\n                  Exchange Rate\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.getRowContent(this.state.exchangeRates)}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    );\n  }\n}\nexport default ExchangeRateInfo;\n","import React from 'react';\nimport ExchangeRateInfo from './ExchangeRateInfo';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExchangeRateInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}